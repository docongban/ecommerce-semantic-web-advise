from ontology import *

def analyze_question_type(question):
    if any(keyword in question.lower() for keyword in ["t·∫•t c·∫£", "danh s√°ch", "li·ªát k√™", "nh·ªØng"]):
        result = "list"
    else:
        result = "detail"
    
    return result

def analyze_question_product(question):
    keyword_category = ["apple", "iphone", "samsung", "oppo", "xiaomi", "vivo", "realme", "nokia",
                        "galaxy", "pro", "plus", "128gb", "256gb", "512gb", "1tb", "note", "max", 
                        "redmi", "find", "reno", "flip", "fold", "mini"]

    words = question.lower().split()
    first_index = float('inf')
    last_index = -1
    for i, word in enumerate(words):
        if word in keyword_category:
            first_index = min(first_index, i)
            last_index = max(last_index, i)
    
    if first_index == float('inf'):
        return []
    result = words[first_index:last_index + 1]
    
    return result

def analyze_question_attribute(question):
    attribute_keywords = {
        "name": ["t√™n", "t√™n ƒëi·ªán tho·∫°i", "t√™n m√°y"],
        "display_size": ["k√≠ch th∆∞·ªõc m√†n h√¨nh"],
        "display_resolution": ["ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh", "ƒë·ªô ph√¢n gi·∫£i"],
        "display_type": ["c√¥ng ngh·ªá m√†n h√¨nh"],
        "display_rate": ["t·∫ßn s·ªë qu√©t m√†n h√¨nh","t·∫ßn s·ªë qu√©t"],
        "camera_primary": ["camera ch√≠nh", "camera sau"],
        "camera_secondary": ["camera tr∆∞·ªõc", "camera selfie"],
        "camera_feature": ["t√≠nh nƒÉng camera", "t√≠nh nƒÉng ch·ª•p ·∫£nh"],
        "operating_system": ["h·ªá ƒëi·ªÅu h√†nh"],
        "operating_system_version": ["phi√™n b·∫£n h·ªá ƒëi·ªÅu h√†nh"],
        "memory_internal": ["ram", "b·ªô nh·ªõ ƒë·ªám"],
        "memory_card_slot": ["th·∫ª nh·ªõ", "th·∫ª nh·ªõ ngo√†i", "th·∫ª nh·ªõ m·ªü r·ªông", "khe c·∫Øm th·∫ª nh·ªõ", "khe c·∫Øm th·∫ª nh·ªõ ngo√†i"],
        "memory_filter": ["phi√™n b·∫£n ram"],
        "storage": ["b·ªô nh·ªõ trong", "dung l∆∞·ª£ng", "b·ªô nh·ªõ"],
        "storage_filter": ["phi√™n b·∫£n b·ªô nh·ªõ trong", "phi√™n b·∫£n dung l∆∞·ª£ng", "phi√™n b·∫£n b·ªô nh·ªõ"],
        "chipset": ["chipset", "vi x·ª≠ l√Ω", "chip"],
        "nfc": ["c√¥ng ngh·ªá nfc", "nfc"],
        "sim": ["th·∫ª sim", "sim"],
        "internet": ["internet", "m·∫°ng"],
        "battery": ["pin", "dung l∆∞·ª£ng pin"],
        "charging_type": ["c·ªïng s·∫°c"],
        "charg": ["c√¥ng ngh·ªá s·∫°c"],
        "weight": ["tr·ªçng l∆∞·ª£ng", "c√¢n n·∫∑ng", "n·∫∑ng"],
        "special_feature": ["t√≠nh nƒÉng ƒë·∫∑c bi·ªát", "t√≠nh nƒÉng n·ªïi tr·ªôi", "t√≠nh nƒÉng m·ªõi"],
        "ecom": ["lo·∫°i s√†n", "shop", "c·ª≠a h√†ng", "n∆°i b√°n", "mua t·∫°i", "mua ·ªü", "b√°n ·ªü", "b√°n t·∫°i"],
        "price": ["gi√° g·ªëc", "gi√° ch∆∞a khuy·∫øn m√£i"],
        "special_price": ["gi√° khuy·∫øn m√£i", "gi√° sale", "gi√° ∆∞u ƒë√£i", "gi√° hi·ªán t·∫°i", "gi√° hi·ªán t·∫°i"],
        "total_rating": ["t·ªïng s·ªë l∆∞·ª£ng ƒë√°nh gi√°", "t·ªïng ƒë√°nh gi√°", "s·ªë l∆∞·ª£t ƒë√°nh gi√°", "t·ªïng s·ªë l∆∞·ª£t ƒë√°nh gi√°"],
        "average_rating": ["ƒëi·ªÉm trung b√¨nh", "ƒë√°nh gi√° trung b√¨nh", "sao trung b√¨nh", "ƒëi·ªÉm ƒë√°nh gi√° trung b√¨nh"],
        "content": ["n·ªôi dung ƒë√°nh gi√°", "ƒë√°nh gi√° chi ti·∫øt", "c·∫£m nh·∫≠n"],
        "rate": ["ƒë√°nh gi√°", "ƒëi·ªÉm ƒë√°nh gi√°", "ƒëi·ªÉm", "sao"],
    }
    
    question_lower = question.lower()
    result = []
    for attr, keywords in attribute_keywords.items():
        if any(keyword in question_lower for keyword in keywords):
            if attr in ["name", "display_size", "display_resolution", "display_type", "display_rate", 
                        "camera_primary", "camera_secondary", "camera_feature", "operating_system", 
                        "operating_system_version", "memory_internal", "memory_card_slot", "memory_filter",
                        "storage", "storage_filter", "chipset", "nfc", "sim", "internet", "battery",
                        "charging_type", "charg", "weight", "special_feature"]:
                category = "Product"
            elif attr in ["ecom", "price", "special_price", "total_rating", "average_rating"]:
                category = "Product_info"
            else:
                category = "Product_review"
            return [category, attr]
    return []

def generate_sparql(type, product, attribute):
    if type == "detail":
        filter_product_conditions = " && ".join(
            f'CONTAINS(LCASE(STR(?name)), "{p}")' for p in product if p
        )
        filter_attribute_conditions = f' && CONTAINS(LCASE(STR(?{attribute[0]})), "{attribute[1]}")'
        query = f"""
            PREFIX ex: <http://example.org/ontology#>

            SELECT ?name ?{attribute[1]} 
            WHERE {{
            ?product a ex:Product ;
                    ex:name ?name ;
                    {attribute[0] == "Product" and f'ex:{attribute[1]} ?{attribute[1]};' or ''}
                    ex:id ?id .
        """
        if attribute[0] == "Product_review":
            query += f"""
                ?product_review a ex:Product_review ;
                                ex:product_id ?id ;
                                ex:ecom ?ecom ;
                                ex:price ?price .
            """
        elif attribute[0] == "Product_info":
            query += f"""
                ?product_info a ex:Product_info ;
                            ex:product_id ?id ;
                            ex:ecom ?ecom ;
                            ex:{attribute[1]} ?{attribute[1]} .
            """
        query += f"""
            FILTER({filter_product_conditions} )
            }}
            LIMIT 1
        """
    else:
        query = """
                SELECT ?product
                WHERE {
                    ?product a ex:Product .
                }
                """
    return query

def main():
    print("üì• H·ªèi v·ªÅ ƒëi·ªán tho·∫°i ... (g√µ 'exit' ƒë·ªÉ tho√°t)")
    # while True:
    question = "t·ªïng ƒë√°nh gi√° iphone 15 pro max"
    # if question.lower() == "exit":
    #     break

    type = analyze_question_type(question)
    product = analyze_question_product(question)
    if(not product):
        print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong c√¢u h·ªèi.")
        return
    attribute = analyze_question_attribute(question)
    
    if(not attribute):
        print("‚ùå Kh√¥ng t√¨m th·∫•y thu·ªôc t√≠nh trong c√¢u h·ªèi.")
        return

    sparql = generate_sparql(type, product, attribute)
    print("\nüìÑ SPARQL ƒë∆∞·ª£c t·∫°o l√†:\n", sparql)

    graph = load_graph()

    results = execute_sparql(graph, sparql)
    # answer = synthesize_answer(question, results)

    print("üí¨ Tr·∫£ l·ªùi:", results[0])
    # print("-" * 50)

if __name__ == "__main__":
    main()
